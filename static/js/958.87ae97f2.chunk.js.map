{"version":3,"file":"static/js/958.87ae97f2.chunk.js","mappings":"2NACA,EAA8B,kCAA9B,EAAsE,0B,4CCiEtE,EA5DqB,WACjB,IAAQA,GAAYC,EAAAA,EAAAA,MAAZD,QACFE,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MACTC,GAAUF,EAASG,MAAMD,KAAOF,EAASG,MAAQ,KAAjDD,KAER,GAA0BE,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAA4BF,EAAAA,EAAAA,UAAS,IAArC,eAAOG,EAAP,KAAeC,EAAf,KACA,GAAgCJ,EAAAA,EAAAA,UAAS,IAAzC,eAAOK,EAAP,KAAiBC,EAAjB,KACA,GAA4BN,EAAAA,EAAAA,UAAS,IAArC,eAAOO,EAAP,KAAeC,EAAf,KACA,GAA0BR,EAAAA,EAAAA,YAA1B,eAAOS,EAAP,KAAcC,EAAd,KACA,GAAwBV,EAAAA,EAAAA,YAAxB,eAAOW,EAAP,KAAaC,EAAb,KAqBA,OAnBAC,EAAAA,EAAAA,YAAU,WACN,IAAMC,EAAiB,mCAAG,0HAE+DC,EAAAA,EAAAA,IAAgBvB,GAF/E,gBAEXe,EAFW,EAEXA,OAAQF,EAFG,EAEHA,SAAUW,EAFP,EAEOA,YAAaf,EAFpB,EAEoBA,MAAOgB,EAF3B,EAE2BA,aAAcC,EAFzC,EAEyCA,aAC3DV,EAAUD,GACVD,EAAYD,GACZD,EAAU,kCAAD,OAAmCY,IAC5Cd,EAASD,GACTS,EAASO,GACTL,EAAQM,EAAaC,MAAM,EAAE,IARX,kDAWlBC,MAAM,KAAMC,SAXM,0DAAH,qDAevBP,GACH,GAAE,CAACtB,KAEG,4BACH,mBAAQ8B,KAAK,SAASC,QAAS,kBAAM7B,EAASI,EAAf,EAA/B,sBACA,qBAAS0B,UAAWC,EAApB,WACI,gBAAKC,IAAKvB,EAAQwB,IAAI,SAASC,MAAM,WACrC,iBAAKJ,UAAWC,EAAhB,WACI,0BAAKxB,EAAL,KAAcU,EAAd,QACA,wCAAgBkB,KAAKC,MAAc,GAARrB,GAA3B,QACA,sCACA,uBAAIJ,KACJ,oCACA,yBAAIE,EAAOwB,KAAI,SAAAC,GAAK,OAAEA,EAAMC,IAAR,IAAcC,KAAK,KAAvC,cAGR,gCACI,oDACA,2BACI,yBACI,SAAC,KAAD,CAAMC,GAAG,OAAOpC,MAAO,CAAED,KAAAA,GAAzB,qBAEJ,yBACI,SAAC,KAAD,CAAMqC,GAAG,UAAUpC,MAAO,CAAED,KAAAA,GAA5B,8BAIZ,SAAC,KAAD,MAEP,C,sLC9DKsC,E,OAAWC,EAAAA,OAAa,CAC1BC,QAAS,gCACTC,OAAQ,CACJC,QAAS,sCAIJC,EAAa,mCAAG,sGACFL,EAASM,IAAT,sBADE,uBACjBC,EADiB,EACjBA,KADiB,kBAElBA,GAFkB,2CAAH,qDAKb5B,EAAe,mCAAG,WAAO6B,GAAP,yFACJR,EAASM,IAAT,gBAAsBE,IADlB,uBACnBD,EADmB,EACnBA,KADmB,kBAEpBA,GAFoB,2CAAH,sDAKfE,EAAY,mCAAG,WAAOC,GAAP,yFACDV,EAASM,IAAT,eAA6B,CAChDH,OAAQ,CACJO,MAAAA,KAHgB,uBAChBH,EADgB,EAChBA,KADgB,kBAMjBA,GANiB,2CAAH,sDASZI,EAAO,mCAAG,WAAOH,GAAP,yFACIR,EAASM,IAAT,gBAAsBE,EAAtB,aADJ,uBACXD,EADW,EACXA,KADW,kBAEZA,GAFY,2CAAH,sDAKPK,EAAU,mCAAG,WAAOJ,GAAP,yFACCR,EAASM,IAAT,gBAAsBE,EAAtB,aADD,uBACdD,EADc,EACdA,KADc,kBAEfA,GAFe,2CAAH,qD","sources":["webpack://goit-react-hw-05-movies/./src/components/pages/MovieDetails/MovieDetails.module.css?1b37","components/pages/MovieDetails/MovieDetails.jsx","components/shared/services/films-api.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"mainSection\":\"MovieDetails_mainSection__62ran\",\"box\":\"MovieDetails_box__2Owhv\"};","import styles from \"./MovieDetails.module.css\";\nimport { Link, useLocation, useParams, useNavigate, Outlet } from 'react-router-dom';\nimport { getMovieDetails } from 'components/shared/services/films-api';\nimport { useEffect, useState } from 'react';\n\n\nconst MovieDetails = () => {\n    const { movieId } = useParams();\n    const navigate = useNavigate();\n    const location = useLocation();\n    const { from } = (location.state.from ? location.state : \"/\");\n\n    const [title, setTitle] = useState('');\n    const [poster, setPoster] = useState('');\n    const [overview, setOverview] = useState('');\n    const [genres, setGenres] = useState([]);\n    const [score, setScore] = useState();\n    const [date, setDate] = useState();\n\n    useEffect(() => {\n        const fetchMovieDetails = async () => {\n            try {\n                const {genres, overview, poster_path, title, vote_average, release_date} = await getMovieDetails(movieId);\n                setGenres(genres);\n                setOverview(overview);\n                setPoster(`https://image.tmdb.org/t/p/w500${poster_path}`);\n                setTitle(title);\n                setScore(vote_average);\n                setDate(release_date.slice(0,4))\n            }\n            catch (error) {\n                alert(error.message);\n            }\n        }\n\n        fetchMovieDetails();\n    }, [movieId]);\n\n    return <div>\n        <button type='button' onClick={() => navigate(from)}>Go back</button>\n        <section className={styles.mainSection}>\n            <img src={poster} alt=\"poster\" width=\"200px\" />\n            <div className={styles.box}>\n                <h1>{title} ({date})</h1>\n                <p>User score: {Math.round(score * 10)}%</p>\n                <h3>Overview</h3>\n                <p>{overview}</p>\n                <h3>Genres</h3>\n                <p>{genres.map(genre=>genre.name).join(\" \")} </p>\n            </div>\n        </section>\n        <section>\n            <h2>Additional information</h2>\n            <ul>\n                <li>\n                    <Link to=\"cast\" state={{ from }}>Cast</Link>\n                </li>\n                <li>\n                    <Link to=\"reviews\" state={{ from }}>Reviews</Link>\n                </li>\n            </ul>\n        </section>\n        <Outlet/>\n    </div>\n}\n\nexport default MovieDetails;","import axios from \"axios\";\n\nconst instance = axios.create({\n    baseURL: 'https://api.themoviedb.org/3/',\n    params: {\n        api_key: \"bd3df65c58adfe1a0f9f7b7557ea4fe2\",\n    }\n})\n\nexport const trendingFilms = async () => {\n    const { data } = await instance.get(`trending/movie/day`);\n    return data;\n}\n\nexport const getMovieDetails = async (id) => {\n    const { data } = await instance.get(`movie/${id}`);\n    return data;\n}\n\nexport const searchMovies = async (query) => {\n    const { data } = await instance.get(`search/movie`, {\n        params: {\n            query,\n        }\n    });\n    return data;\n}\n\nexport const getCast = async (id) => {\n    const { data } = await instance.get(`movie/${id}/credits`);\n    return data;\n}\n\nexport const getReviews = async (id) => {\n    const { data } = await instance.get(`movie/${id}/reviews`);\n    return data;\n}\n\n\n\n"],"names":["movieId","useParams","navigate","useNavigate","location","useLocation","from","state","useState","title","setTitle","poster","setPoster","overview","setOverview","genres","setGenres","score","setScore","date","setDate","useEffect","fetchMovieDetails","getMovieDetails","poster_path","vote_average","release_date","slice","alert","message","type","onClick","className","styles","src","alt","width","Math","round","map","genre","name","join","to","instance","axios","baseURL","params","api_key","trendingFilms","get","data","id","searchMovies","query","getCast","getReviews"],"sourceRoot":""}